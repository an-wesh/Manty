// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]

  // Manty-specific fields
  mediaFiles MediaFile[]
  analyses   MediaAnalysis[]
  projects   Project[]
  captions   GeneratedCaption[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model MediaFile {
  id           String   @id @default(cuid())
  userId       String
  filename     String
  originalName String
  mimeType     String
  size         Int
  url          String
  thumbnailUrl String?
  metadata     Json?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user         User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  analyses     MediaAnalysis[]
  projectFiles ProjectMediaFile[]
}

model MediaAnalysis {
  id              String   @id @default(cuid())
  mediaId         String
  userId          String
  mood            String
  moodConfidence  Float
  sceneType       String
  sceneConfidence Float
  colorPalette    String[]
  objects         String[]
  composition     String
  style           String?
  lighting        String?
  emotions        String[]
  embedding       Float[] // ✅ Always a list
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  media        MediaFile    @relation(fields: [mediaId], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  trendMatches TrendMatch[]
}

model Trend {
  id          String   @id @default(cuid())
  name        String
  category    String
  platforms   String[]
  popularity  Int
  hashtags    String[]
  colors      String[]
  mood        String
  description String
  embedding   Float[] // ✅ Always a list
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  matches TrendMatch[]
}

model TrendMatch {
  id                   String   @id @default(cuid())
  analysisId           String
  trendId              String
  score                Float
  compatibilityReasons String[]
  createdAt            DateTime @default(now())

  analysis MediaAnalysis @relation(fields: [analysisId], references: [id], onDelete: Cascade)
  trend    Trend         @relation(fields: [trendId], references: [id], onDelete: Cascade)

  @@unique([analysisId, trendId])
}

model Project {
  id          String   @id @default(cuid())
  userId      String
  name        String
  description String?
  platform    String
  status      String   @default("draft") // draft, in_progress, completed, archived
  thumbnail   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user       User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  mediaFiles ProjectMediaFile[]
  captions   GeneratedCaption[]
}

model ProjectMediaFile {
  id        String @id @default(cuid())
  projectId String
  mediaId   String

  project Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  media   MediaFile @relation(fields: [mediaId], references: [id], onDelete: Cascade)

  @@unique([projectId, mediaId])
}

model GeneratedCaption {
  id              String   @id @default(cuid())
  projectId       String?
  mediaId         String?
  userId          String
  platform        String
  text            String
  hashtags        String[]
  tone            String
  characterCount  Int
  engagementScore Float?
  createdAt       DateTime @default(now())

  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  project Project? @relation(fields: [projectId], references: [id], onDelete: SetNull)
}
